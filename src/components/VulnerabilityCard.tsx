import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { ExternalLink, Calendar, Shield, AlertTriangle } from "lucide-react";
import { cn } from "@/lib/utils";

export interface Vulnerability {
  id: string;
  title: string;
  description: string;
  severity: "critical" | "high" | "medium" | "low" | "info";
  cvssScore?: number;
  publishedDate: string;
  vendor: string;
  affectedProducts: string[];
  cveId?: string;
  source: string;
  sourceUrl: string;
}

interface VulnerabilityCardProps {
  vulnerability: Vulnerability;
}

const severityColors = {
  critical: "bg-severity-critical border-severity-critical text-white",
  high: "bg-severity-high border-severity-high text-white",
  medium: "bg-severity-medium border-severity-medium text-white",
  low: "bg-severity-low border-severity-low text-white",
  info: "bg-severity-info border-severity-info text-white",
};

const severityIcons = {
  critical: AlertTriangle,
  high: AlertTriangle,
  medium: Shield,
  low: Shield,
  info: Shield,
};

export const VulnerabilityCard = ({ vulnerability }: VulnerabilityCardProps) => {
  const SeverityIcon = severityIcons[vulnerability.severity];

  return (
    <Card className="group hover:shadow-lg transition-all duration-300 border-border/50 hover:border-primary/30 bg-gradient-to-br from-card to-card/50">
      <CardHeader className="space-y-3">
        <div className="flex items-start justify-between gap-4">
          <CardTitle className="text-lg leading-tight group-hover:text-primary transition-colors">
            {vulnerability.title}
          </CardTitle>
          <Badge 
            variant="outline" 
            className={cn(
              "shrink-0 font-semibold uppercase text-xs px-3 py-1 flex items-center gap-1",
              severityColors[vulnerability.severity]
            )}
          >
            <SeverityIcon className="h-3 w-3" />
            {vulnerability.severity}
          </Badge>
        </div>
        
        <div className="flex items-center gap-4 text-sm text-muted-foreground">
          <div className="flex items-center gap-1">
            <Calendar className="h-4 w-4" />
            {new Date(vulnerability.publishedDate).toLocaleDateString()}
          </div>
          {vulnerability.cvssScore && (
            <div className="flex items-center gap-1">
              <Shield className="h-4 w-4" />
              CVSS: {vulnerability.cvssScore}
            </div>
          )}
        </div>
      </CardHeader>

      <CardContent className="space-y-4">
        <CardDescription className="text-foreground/80 leading-relaxed">
          {vulnerability.description}
        </CardDescription>

        <div className="space-y-3">
          <div>
            <span className="text-sm font-medium text-muted-foreground">Vendor:</span>
            <Badge variant="secondary" className="ml-2">{vulnerability.vendor}</Badge>
          </div>
          
          {vulnerability.cveId && (
            <div>
              <span className="text-sm font-medium text-muted-foreground">CVE ID:</span>
              <Badge variant="outline" className="ml-2 font-mono">{vulnerability.cveId}</Badge>
            </div>
          )}

          <div>
            <span className="text-sm font-medium text-muted-foreground">Affected Products:</span>
            <div className="flex flex-wrap gap-1 mt-1">
              {vulnerability.affectedProducts.map((product, index) => (
                <Badge key={index} variant="secondary" className="text-xs">
                  {product}
                </Badge>
              ))}
            </div>
          </div>
        </div>

        <div className="flex items-center justify-between pt-2">
          <Badge variant="outline" className="text-xs">{vulnerability.source}</Badge>
          <Button 
            size="sm" 
            variant="ghost" 
            className="text-primary hover:text-primary-foreground hover:bg-primary"
            onClick={() => window.open(vulnerability.sourceUrl, '_blank')}
          >
            View Details
            <ExternalLink className="ml-1 h-3 w-3" />
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};