import { useState, useMemo } from "react";
import { ChatInterface } from "@/components/ChatInterface";
import { VulnerabilityCard, Vulnerability } from "@/components/VulnerabilityCard";
import { sampleVulnerabilities } from "@/data/sampleVulnerabilities";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Search, Shield, AlertTriangle, TrendingUp, Database } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

export const VulnerabilityDashboard = () => {
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedSeverity, setSelectedSeverity] = useState<string>("all");
  const [selectedVendor, setSelectedVendor] = useState<string>("all");
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const filteredVulnerabilities = useMemo(() => {
    return sampleVulnerabilities.filter((vuln) => {
      const matchesSearch = vuln.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                           vuln.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
                           vuln.vendor.toLowerCase().includes(searchQuery.toLowerCase()) ||
                           vuln.cveId?.toLowerCase().includes(searchQuery.toLowerCase());
      
      const matchesSeverity = selectedSeverity === "all" || vuln.severity === selectedSeverity;
      const matchesVendor = selectedVendor === "all" || vuln.vendor === selectedVendor;
      
      return matchesSearch && matchesSeverity && matchesVendor;
    });
  }, [searchQuery, selectedSeverity, selectedVendor]);

  const vendors = Array.from(new Set(sampleVulnerabilities.map(v => v.vendor)));
  const severityCounts = sampleVulnerabilities.reduce((acc, vuln) => {
    acc[vuln.severity] = (acc[vuln.severity] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  const handleChatQuery = (query: string) => {
    setIsLoading(true);
    
    // Simulate processing time
    setTimeout(() => {
      setIsLoading(false);
      
      // For now, show a message that this is a demo
      toast({
        title: "Demo Mode",
        description: "This is a demonstration interface. Connect to Supabase to enable real-time vulnerability data fetching from security advisory sources.",
        duration: 5000,
      });
    }, 2000);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background/95 to-background/90">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <div className="p-2 bg-primary/10 rounded-lg">
              <Shield className="h-8 w-8 text-primary" />
            </div>
            <div>
              <h1 className="text-3xl font-bold bg-gradient-to-r from-primary to-primary/80 bg-clip-text text-transparent">
                CyberSec Vulnerability Assistant
              </h1>
              <p className="text-muted-foreground">
                Real-time security advisory monitoring across 12 major vendors
              </p>
            </div>
          </div>
          
          {/* Stats Cards */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <Card className="bg-gradient-to-br from-card to-card/50 border-border/50">
              <CardHeader className="pb-2">
                <CardDescription>Total Vulnerabilities</CardDescription>
                <CardTitle className="text-2xl text-primary">{sampleVulnerabilities.length}</CardTitle>
              </CardHeader>
            </Card>
            
            <Card className="bg-gradient-to-br from-card to-card/50 border-border/50">
              <CardHeader className="pb-2">
                <CardDescription>Critical Severity</CardDescription>
                <CardTitle className="text-2xl text-severity-critical">
                  {severityCounts.critical || 0}
                </CardTitle>
              </CardHeader>
            </Card>
            
            <Card className="bg-gradient-to-br from-card to-card/50 border-border/50">
              <CardHeader className="pb-2">
                <CardDescription>High Severity</CardDescription>
                <CardTitle className="text-2xl text-severity-high">
                  {severityCounts.high || 0}
                </CardTitle>
              </CardHeader>
            </Card>
            
            <Card className="bg-gradient-to-br from-card to-card/50 border-border/50">
              <CardHeader className="pb-2">
                <CardDescription>Active Vendors</CardDescription>
                <CardTitle className="text-2xl text-primary">{vendors.length}</CardTitle>
              </CardHeader>
            </Card>
          </div>
        </div>

        <Tabs defaultValue="chat" className="w-full">
          <TabsList className="grid w-full grid-cols-2 mb-6">
            <TabsTrigger value="chat" className="flex items-center gap-2">
              <Database className="h-4 w-4" />
              AI Assistant
            </TabsTrigger>
            <TabsTrigger value="browse" className="flex items-center gap-2">
              <TrendingUp className="h-4 w-4" />
              Browse Vulnerabilities
            </TabsTrigger>
          </TabsList>

          <TabsContent value="chat" className="space-y-4">
            <Card className="h-[600px] flex flex-col border-border/50 bg-gradient-to-br from-card to-card/50">
              <CardHeader className="border-b border-border/50">
                <CardTitle className="flex items-center gap-2">
                  <Shield className="h-5 w-5 text-primary" />
                  Security Advisory Assistant
                </CardTitle>
                <CardDescription>
                  Ask about vulnerabilities, CVEs, or security advisories from Dell, VMware, Nutanix, RSA, Microsoft, Cisco, Palo Alto, SonicWall, CISA, CERT-EU, CERT-IN, and Google Cloud
                </CardDescription>
              </CardHeader>
              <CardContent className="flex-1 p-0">
                <ChatInterface onQuery={handleChatQuery} isLoading={isLoading} />
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="browse" className="space-y-6">
            {/* Filters */}
            <Card className="p-6 border-border/50 bg-gradient-to-br from-card to-card/50">
              <div className="flex flex-col md:flex-row gap-4">
                <div className="flex-1">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                    <Input
                      placeholder="Search vulnerabilities, CVEs, vendors..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="pl-10 bg-input border-border/50"
                    />
                  </div>
                </div>
                
                <Select value={selectedSeverity} onValueChange={setSelectedSeverity}>
                  <SelectTrigger className="w-full md:w-[180px]">
                    <SelectValue placeholder="Filter by severity" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Severities</SelectItem>
                    <SelectItem value="critical">Critical</SelectItem>
                    <SelectItem value="high">High</SelectItem>
                    <SelectItem value="medium">Medium</SelectItem>
                    <SelectItem value="low">Low</SelectItem>
                    <SelectItem value="info">Info</SelectItem>
                  </SelectContent>
                </Select>
                
                <Select value={selectedVendor} onValueChange={setSelectedVendor}>
                  <SelectTrigger className="w-full md:w-[180px]">
                    <SelectValue placeholder="Filter by vendor" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Vendors</SelectItem>
                    {vendors.map((vendor) => (
                      <SelectItem key={vendor} value={vendor}>
                        {vendor}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </Card>

            {/* Results */}
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-semibold">
                  Security Advisories 
                  <Badge variant="secondary" className="ml-2">
                    {filteredVulnerabilities.length} found
                  </Badge>
                </h2>
                
                <div className="text-sm text-muted-foreground">
                  Last updated: {new Date().toLocaleString()}
                </div>
              </div>

              <div className="grid gap-6">
                {filteredVulnerabilities.length > 0 ? (
                  filteredVulnerabilities.map((vulnerability) => (
                    <VulnerabilityCard key={vulnerability.id} vulnerability={vulnerability} />
                  ))
                ) : (
                  <Card className="p-8 text-center border-border/50 bg-gradient-to-br from-card to-card/50">
                    <AlertTriangle className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                    <h3 className="text-lg font-semibold mb-2">No vulnerabilities found</h3>
                    <p className="text-muted-foreground">
                      Try adjusting your search criteria or filters.
                    </p>
                  </Card>
                )}
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};